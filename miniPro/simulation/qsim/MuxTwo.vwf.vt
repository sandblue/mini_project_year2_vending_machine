// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/17/2016 11:23:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MuxTwo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MuxTwo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] bcd_1;
reg [3:0] bcd_2;
reg selec;
// wires                                               
wire [3:0] result;

// assign statements (if any)                          
MuxTwo i1 (
// port map - connection between master ports and signals/registers   
	.bcd_1(bcd_1),
	.bcd_2(bcd_2),
	.result(result),
	.selec(selec)
);
initial 
begin 
#20000000 $finish;
end 
// bcd_1[ 3 ]
initial
begin
	bcd_1[3] = 1'b0;
end 
// bcd_1[ 2 ]
initial
begin
	bcd_1[2] = 1'b0;
end 
// bcd_1[ 1 ]
initial
begin
	bcd_1[1] = 1'b0;
end 
// bcd_1[ 0 ]
initial
begin
	bcd_1[0] = 1'b0;
end 
// bcd_2[ 3 ]
initial
begin
	bcd_2[3] = 1'b1;
end 
// bcd_2[ 2 ]
initial
begin
	bcd_2[2] = 1'b1;
end 
// bcd_2[ 1 ]
initial
begin
	bcd_2[1] = 1'b1;
end 
// bcd_2[ 0 ]
initial
begin
	bcd_2[0] = 1'b1;
end 

// selec
initial
begin
	repeat(66)
	begin
		selec = 1'b0;
		selec = #150000 1'b1;
		# 150000;
	end
	selec = 1'b0;
	selec = #150000 1'b1;
end 
initial 
begin 
#20000000 $finish;
end 
endmodule

