// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/17/2016 10:03:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    process_price
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module process_price_vlg_sample_tst(
	input_buy,
	input_clk,
	input_five,
	input_one,
	input_price,
	input_ten,
	sampler_tx
);
input  input_buy;
input  input_clk;
input  input_five;
input  input_one;
input [1:0] input_price;
input  input_ten;
output sampler_tx;

reg sample;
time current_time;
always @(input_buy or input_clk or input_five or input_one or input_price or input_ten)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module process_price_vlg_check_tst (
	out_buzzer_on,
	out_digit_one,
	out_digit_two,
	sampler_rx
);
input  out_buzzer_on;
input [3:0] out_digit_one;
input [3:0] out_digit_two;
input sampler_rx;

reg  out_buzzer_on_expected;
reg [3:0] out_digit_one_expected;
reg [3:0] out_digit_two_expected;

reg  out_buzzer_on_prev;
reg [3:0] out_digit_one_prev;
reg [3:0] out_digit_two_prev;

reg  out_buzzer_on_expected_prev;
reg [3:0] out_digit_one_expected_prev;
reg [3:0] out_digit_two_expected_prev;

reg  last_out_buzzer_on_exp;
reg [3:0] last_out_digit_one_exp;
reg [3:0] last_out_digit_two_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	out_buzzer_on_prev = out_buzzer_on;
	out_digit_one_prev = out_digit_one;
	out_digit_two_prev = out_digit_two;
end

// update expected /o prevs

always @(trigger)
begin
	out_buzzer_on_expected_prev = out_buzzer_on_expected;
	out_digit_one_expected_prev = out_digit_one_expected;
	out_digit_two_expected_prev = out_digit_two_expected;
end


// expected out_digit_one[ 3 ]
initial
begin
	out_digit_one_expected[3] = 1'bX;
end 
// expected out_digit_one[ 2 ]
initial
begin
	out_digit_one_expected[2] = 1'bX;
end 
// expected out_digit_one[ 1 ]
initial
begin
	out_digit_one_expected[1] = 1'bX;
end 
// expected out_digit_one[ 0 ]
initial
begin
	out_digit_one_expected[0] = 1'bX;
end 
// expected out_digit_two[ 3 ]
initial
begin
	out_digit_two_expected[3] = 1'bX;
end 
// expected out_digit_two[ 2 ]
initial
begin
	out_digit_two_expected[2] = 1'bX;
end 
// expected out_digit_two[ 1 ]
initial
begin
	out_digit_two_expected[1] = 1'bX;
end 
// expected out_digit_two[ 0 ]
initial
begin
	out_digit_two_expected[0] = 1'bX;
end 

// expected out_buzzer_on
initial
begin
	out_buzzer_on_expected = 1'bX;
end 
// generate trigger
always @(out_buzzer_on_expected or out_buzzer_on or out_digit_one_expected or out_digit_one or out_digit_two_expected or out_digit_two)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out_buzzer_on = %b | expected out_digit_one = %b | expected out_digit_two = %b | ",out_buzzer_on_expected_prev,out_digit_one_expected_prev,out_digit_two_expected_prev);
	$display("| real out_buzzer_on = %b | real out_digit_one = %b | real out_digit_two = %b | ",out_buzzer_on_prev,out_digit_one_prev,out_digit_two_prev);
`endif
	if (
		( out_buzzer_on_expected_prev !== 1'bx ) && ( out_buzzer_on_prev !== out_buzzer_on_expected_prev )
		&& ((out_buzzer_on_expected_prev !== last_out_buzzer_on_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_buzzer_on :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_buzzer_on_expected_prev);
		$display ("     Real value = %b", out_buzzer_on_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_buzzer_on_exp = out_buzzer_on_expected_prev;
	end
	if (
		( out_digit_one_expected_prev[0] !== 1'bx ) && ( out_digit_one_prev[0] !== out_digit_one_expected_prev[0] )
		&& ((out_digit_one_expected_prev[0] !== last_out_digit_one_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_digit_one[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_digit_one_expected_prev);
		$display ("     Real value = %b", out_digit_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_digit_one_exp[0] = out_digit_one_expected_prev[0];
	end
	if (
		( out_digit_one_expected_prev[1] !== 1'bx ) && ( out_digit_one_prev[1] !== out_digit_one_expected_prev[1] )
		&& ((out_digit_one_expected_prev[1] !== last_out_digit_one_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_digit_one[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_digit_one_expected_prev);
		$display ("     Real value = %b", out_digit_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_digit_one_exp[1] = out_digit_one_expected_prev[1];
	end
	if (
		( out_digit_one_expected_prev[2] !== 1'bx ) && ( out_digit_one_prev[2] !== out_digit_one_expected_prev[2] )
		&& ((out_digit_one_expected_prev[2] !== last_out_digit_one_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_digit_one[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_digit_one_expected_prev);
		$display ("     Real value = %b", out_digit_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_digit_one_exp[2] = out_digit_one_expected_prev[2];
	end
	if (
		( out_digit_one_expected_prev[3] !== 1'bx ) && ( out_digit_one_prev[3] !== out_digit_one_expected_prev[3] )
		&& ((out_digit_one_expected_prev[3] !== last_out_digit_one_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_digit_one[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_digit_one_expected_prev);
		$display ("     Real value = %b", out_digit_one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_digit_one_exp[3] = out_digit_one_expected_prev[3];
	end
	if (
		( out_digit_two_expected_prev[0] !== 1'bx ) && ( out_digit_two_prev[0] !== out_digit_two_expected_prev[0] )
		&& ((out_digit_two_expected_prev[0] !== last_out_digit_two_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_digit_two[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_digit_two_expected_prev);
		$display ("     Real value = %b", out_digit_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_digit_two_exp[0] = out_digit_two_expected_prev[0];
	end
	if (
		( out_digit_two_expected_prev[1] !== 1'bx ) && ( out_digit_two_prev[1] !== out_digit_two_expected_prev[1] )
		&& ((out_digit_two_expected_prev[1] !== last_out_digit_two_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_digit_two[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_digit_two_expected_prev);
		$display ("     Real value = %b", out_digit_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_digit_two_exp[1] = out_digit_two_expected_prev[1];
	end
	if (
		( out_digit_two_expected_prev[2] !== 1'bx ) && ( out_digit_two_prev[2] !== out_digit_two_expected_prev[2] )
		&& ((out_digit_two_expected_prev[2] !== last_out_digit_two_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_digit_two[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_digit_two_expected_prev);
		$display ("     Real value = %b", out_digit_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_digit_two_exp[2] = out_digit_two_expected_prev[2];
	end
	if (
		( out_digit_two_expected_prev[3] !== 1'bx ) && ( out_digit_two_prev[3] !== out_digit_two_expected_prev[3] )
		&& ((out_digit_two_expected_prev[3] !== last_out_digit_two_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_digit_two[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_digit_two_expected_prev);
		$display ("     Real value = %b", out_digit_two_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_digit_two_exp[3] = out_digit_two_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module process_price_vlg_vec_tst();
// constants                                           
// general purpose registers
reg input_buy;
reg input_clk;
reg input_five;
reg input_one;
reg [1:0] input_price;
reg input_ten;
// wires                                               
wire out_buzzer_on;
wire [3:0] out_digit_one;
wire [3:0] out_digit_two;

wire sampler;                             

// assign statements (if any)                          
process_price i1 (
// port map - connection between master ports and signals/registers   
	.input_buy(input_buy),
	.input_clk(input_clk),
	.input_five(input_five),
	.input_one(input_one),
	.input_price(input_price),
	.input_ten(input_ten),
	.out_buzzer_on(out_buzzer_on),
	.out_digit_one(out_digit_one),
	.out_digit_two(out_digit_two)
);

// input_clk
initial
begin
	repeat(335)
	begin
		input_clk = 1'b0;
		input_clk = #10000 1'b1;
		# 10000;
	end
	input_clk = 1'b0;
	input_clk = #10000 1'b1;
	# 10000;
	repeat(4)
	begin
		input_clk = 1'b0;
		input_clk = #10000 1'b1;
		# 10000;
	end
	input_clk = 1'b0;
	input_clk = #10000 1'b1;
	# 10000;
	repeat(659)
	begin
		input_clk = 1'b0;
		input_clk = #10000 1'b1;
		# 10000;
	end
end 

// input_buy
initial
begin
	input_buy = 1'b1;
	input_buy = #160000 1'b0;
	input_buy = #320000 1'b1;
	input_buy = #6960000 1'b0;
	input_buy = #240000 1'b1;
end 

// input_ten
initial
begin
	input_ten = 1'b1;
	input_ten = #960000 1'b0;
	input_ten = #160000 1'b1;
	input_ten = #1600000 1'b0;
	input_ten = #400000 1'b1;
	input_ten = #240000 1'b0;
	input_ten = #320000 1'b1;
	input_ten = #1760000 1'b0;
	input_ten = #80000 1'b1;
	input_ten = #2320000 1'b0;
	input_ten = #320000 1'b1;
	input_ten = #320000 1'b0;
	input_ten = #80000 1'b1;
end 

// input_five
initial
begin
	input_five = 1'b1;
	input_five = #1520000 1'b0;
	input_five = #320000 1'b1;
	input_five = #2800000 1'b0;
	input_five = #800000 1'b1;
	input_five = #2720000 1'b0;
	input_five = #240000 1'b1;
end 

// input_one
initial
begin
	input_one = 1'b1;
	input_one = #2400000 1'b0;
	input_one = #80000 1'b1;
	input_one = #1600000 1'b0;
	input_one = #400000 1'b1;
	input_one = #3680000 1'b0;
	input_one = #240000 1'b1;
end 
// input_price[ 1 ]
initial
begin
	repeat(16)
	begin
		input_price[1] = 1'b0;
		input_price[1] = #600000 1'b1;
		# 600000;
	end
	input_price[1] = 1'b0;
	input_price[1] = #600000 1'b1;
end 
// input_price[ 0 ]
initial
begin
	repeat(33)
	begin
		input_price[0] = 1'b0;
		input_price[0] = #300000 1'b1;
		# 300000;
	end
	input_price[0] = 1'b0;
end 

process_price_vlg_sample_tst tb_sample (
	.input_buy(input_buy),
	.input_clk(input_clk),
	.input_five(input_five),
	.input_one(input_one),
	.input_price(input_price),
	.input_ten(input_ten),
	.sampler_tx(sampler)
);

process_price_vlg_check_tst tb_out(
	.out_buzzer_on(out_buzzer_on),
	.out_digit_one(out_digit_one),
	.out_digit_two(out_digit_two),
	.sampler_rx(sampler)
);
endmodule

